'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var format = _interopDefault(require('date-fns/format'));
var getYear = _interopDefault(require('date-fns/get_year'));
var addDays = _interopDefault(require('date-fns/add_days'));
var getDay = _interopDefault(require('date-fns/get_day'));
var getMonth = _interopDefault(require('date-fns/get_month'));
var isAfter = _interopDefault(require('date-fns/is_after'));
var isSameYear = _interopDefault(require('date-fns/is_same_year'));
var parse = _interopDefault(require('date-fns/parse'));
var setDay = _interopDefault(require('date-fns/set_day'));
var subYears = _interopDefault(require('date-fns/sub_years'));
var color = _interopDefault(require('tinycolor2'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

// GitHub theme
var DEFAULT_THEME = {
  background: 'transparent',
  text: '#000',
  grade4: '#196127',
  grade3: '#239a3b',
  grade2: '#7bc96f',
  grade1: '#c6e48b',
  grade0: '#ebedf0'
};
var NAMESPACE = 'react-github-calendar';
var LINE_HEIGHT = 1.5;
var MIN_DISTANCE_MONTH_LABELS = 2;
var TITLE_SCALE_FACTOR = 1.25;

var API_URL = 'https://github-calendar.now.sh/v1/';
var DATE_FORMAT = 'YYYY-MM-DD';

function getContributionsForDate(data, date) {
  return data.contributions.find(function (contrib) {
    return contrib.date === date;
  });
}

function getContributionCountForLastYear(data) {
  var contributions = data.contributions;
  var now = new Date(); // Start date for accumulating the values

  var begin = contributions.findIndex(function (contrib) {
    return contrib.date === format(now, DATE_FORMAT);
  }); // No data for today given

  if (begin === -1) {
    return 0;
  } // Check if there is data for the day one year past


  var end = contributions.findIndex(function (contrib) {
    return contrib.date === format(subYears(now, 1), DATE_FORMAT);
  }); // Take the oldest contribution otherwise, if not enough data exists

  if (end === -1) {
    end = contributions.length - 1;
  }

  return contributions.slice(begin, end).reduce(function (acc, contrib) {
    return acc + contrib.count;
  }, 0);
}

function getContributionCountForYear(data, year) {
  var yearEntry = data.years.find(function (entry) {
    return entry.year === String(year);
  });
  return yearEntry ? yearEntry.total : 0;
}

function getBlocksForYear(year, data, fullYear) {
  var now = new Date();
  var firstDate = fullYear ? subYears(now, 1) : parse("".concat(year, "-01-01"));
  var lastDate = fullYear ? now : parse("".concat(year, "-12-31"));
  var weekStart = firstDate; // The week starts on Sunday - add days to get to next sunday if neccessary

  if (getDay(firstDate) !== 0) {
    weekStart = addDays(firstDate, getDay(firstDate));
  } // Fetch graph data for first row (Sundays)


  var firstRowDates = [];

  while (weekStart <= lastDate) {
    var date = format(weekStart, DATE_FORMAT);
    firstRowDates.push({
      date: date,
      info: getContributionsForDate(data, date)
    });
    weekStart = setDay(weekStart, 7);
  } // Add the remainig days per week (column for column)


  return firstRowDates.map(function (dateObj) {
    var dates = [];

    for (var i = 0; i <= 6; i += 1) {
      var _date = format(setDay(dateObj.date, i), DATE_FORMAT);

      if (isAfter(_date, lastDate)) {
        break;
      }

      dates.push({
        date: _date,
        info: getContributionsForDate(data, _date)
      });
    }

    return dates;
  });
}

function getMonthLabels(blocks, fullYear) {
  var previousMonth = 0; // January

  var length = blocks.length;
  return blocks.slice(0, fullYear ? length - 1 : length).reduce(function (acc, week, x) {
    var date = parse(week[0].date);
    var month = getMonth(date) + 1;
    var monthChanged = month !== previousMonth;
    var firstMonthIsDec = x === 0 && month === 12;

    if (monthChanged && !firstMonthIsDec) {
      acc.push({
        x: x,
        label: format(date, 'MMM')
      });
      previousMonth = month;
    }

    return acc;
  }, []);
}

function getGraphDataForYear(year, data, fullYear) {
  var blocks = getBlocksForYear(year, data, fullYear);
  var monthLabels = getMonthLabels(blocks, fullYear);
  var totalCount = fullYear ? getContributionCountForLastYear(data) : getContributionCountForYear(data, year);
  return {
    year: year,
    blocks: blocks,
    monthLabels: monthLabels,
    totalCount: totalCount
  };
}
/**
 * Get the GitHub contributions for a specific user
 * @param options
 * @throws {Error} - Throws an error if the request fails or no data is available
 * @return {Promise<{blocks, monthLabels, totalCount}>} - A promise containing the data
 */


function getGitHubGraphData(_x) {
  return _getGitHubGraphData.apply(this, arguments);
}

function _getGitHubGraphData() {
  _getGitHubGraphData = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(options) {
    var years, fullYear, username, data;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            years = options.years, fullYear = options.fullYear, username = options.username;
            _context.next = 3;
            return fetch(API_URL + username);

          case 3:
            _context.next = 5;
            return _context.sent.json();

          case 5:
            data = _context.sent;

            if (data.years.length) {
              _context.next = 8;
              break;
            }

            throw new Error('No data available');

          case 8:
            return _context.abrupt("return", years.map(function (year) {
              var isCurrentYear = isSameYear(parse(String(year)), new Date());
              return getGraphDataForYear(year, data, isCurrentYear && fullYear);
            }));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getGitHubGraphData.apply(this, arguments);
}

/**
 * Create a calendar color theme based on one color
 * @param {string} baseColor - The base color all lighter hues are calculated from
 * @param {string} textColor - Text color
 * @param {string} emptyCellColor
 * @param {string} background - Calendar background color. `transparent` by default
 * @throws {Error} - Throws an error if the color could not be parsed
 * @return {object} - The color theme object
 */

function createCalendarTheme(baseColor) {
  var textColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'inherit';
  var emptyCellColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : color('white').darken(8).toHslString();
  var background = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'transparent';
  var base = color(baseColor);

  if (!base.isValid()) {
    return DEFAULT_THEME;
  }

  var text = color(textColor).isValid() ? color(textColor) : DEFAULT_THEME.text;
  return {
    background: background,
    text: text,
    grade4: base.setAlpha(0.92).toHslString(),
    grade3: base.setAlpha(0.76).toHslString(),
    grade2: base.setAlpha(0.6).toHslString(),
    grade1: base.setAlpha(0.44).toHslString(),
    grade0: emptyCellColor
  };
}

var GitHubCalendar =
/*#__PURE__*/
function (_Component) {
  _inherits(GitHubCalendar, _Component);

  function GitHubCalendar() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, GitHubCalendar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GitHubCalendar)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      graphs: null,
      error: null
    });

    return _this;
  }

  _createClass(GitHubCalendar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.fetchData(this.props);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.username !== prevProps.username) {
        this.setState({
          graphs: null,
          error: false
        });
        this.fetchData(this.props);
      }
    }
  }, {
    key: "fetchData",
    value: function fetchData(_ref) {
      var _this2 = this;

      var years = _ref.years,
          username = _ref.username,
          fullYear = _ref.fullYear;
      getGitHubGraphData({
        years: years,
        username: username,
        fullYear: fullYear
      }).then(function (graphs) {
        return _this2.setState({
          graphs: graphs
        });
      })["catch"](function (error) {
        return _this2.setState({
          error: error
        });
      });
    }
  }, {
    key: "getTheme",
    value: function getTheme() {
      var _this$props = this.props,
          color = _this$props.color,
          theme = _this$props.theme;

      if (typeof color === 'string') {
        return createCalendarTheme(color);
      }

      return theme ? Object.assign({}, DEFAULT_THEME, theme) : DEFAULT_THEME;
    } // Unfortunately there is no support for CSS modules right now...

  }, {
    key: "getStyles",
    value: function getStyles() {
      var _this$props2 = this.props,
          fontSize = _this$props2.fontSize,
          theme = _this$props2.theme;
      return {
        anchor: {
          color: 'inherit'
        },
        chart: {
          marginBottom: '1rem'
        },
        calendar: {
          maxWidth: '100%',
          height: 'auto',
          marginBottom: '0.25rem',
          backgroundColor: theme.background,
          overflow: 'visible'
        },
        loading: {
          fontSize: '90%'
        },
        meta: {
          fontSize: fontSize
        },
        title: {
          marginBottom: '0.5rem',
          paddingBottom: '0.25rem',
          borderBottom: "2px solid ".concat(this.getTheme().grade0),
          fontSize: "".concat(Math.round(fontSize * TITLE_SCALE_FACTOR), "px")
        }
      };
    }
  }, {
    key: "getClassNameFor",
    value: function getClassNameFor(object) {
      return "".concat(NAMESPACE, "__").concat(object);
    }
  }, {
    key: "getDimensions",
    value: function getDimensions() {
      var _this$props3 = this.props,
          blockMargin = _this$props3.blockMargin,
          blockSize = _this$props3.blockSize,
          fontSize = _this$props3.fontSize;
      var textHeight = Math.round(fontSize * LINE_HEIGHT); // Since weeks start on Sunday, there is a good chance that the graph starts
      // in the week before January 1st. Therefore, the calendar shows 53 weeks.

      var width = (52 + 1) * (blockSize + blockMargin) - blockMargin;
      var height = textHeight + (blockSize + blockMargin) * 7 - blockMargin;
      return {
        width: width,
        height: height
      };
    }
  }, {
    key: "getTooltipMessage",
    value: function getTooltipMessage(day) {
      var dateFormat = this.props.dateFormat;
      return "<strong>".concat(day.info.count, " contributions</strong> on ").concat(format(day.date, dateFormat));
    }
  }, {
    key: "renderTitle",
    value: function renderTitle() {
      var username = this.props.username;
      return React__default.createElement("div", {
        className: this.getClassNameFor('title'),
        style: this.getStyles().title
      }, React__default.createElement("a", {
        href: "https://github.com/".concat(username),
        title: "GitHub profile",
        style: this.getStyles().anchor
      }, "@", username, " on GitHub"));
    }
  }, {
    key: "renderMonthLabels",
    value: function renderMonthLabels(monthLabels) {
      var _this3 = this;

      var _this$props4 = this.props,
          blockSize = _this$props4.blockSize,
          blockMargin = _this$props4.blockMargin,
          fontSize = _this$props4.fontSize; // Remove the first month label if there's not enough space to the next one
      // (end of previous month)

      if (monthLabels[1].x - monthLabels[0].x <= MIN_DISTANCE_MONTH_LABELS) {
        monthLabels.shift();
      }

      return monthLabels.map(function (month) {
        return React__default.createElement("text", {
          x: (blockSize + blockMargin) * month.x,
          y: fontSize,
          key: month.x,
          style: {
            fill: _this3.getTheme().text,
            fontSize: fontSize
          }
        }, month.label);
      });
    }
  }, {
    key: "renderBlocks",
    value: function renderBlocks(blocks) {
      var _this4 = this;

      var _this$props5 = this.props,
          blockSize = _this$props5.blockSize,
          blockMargin = _this$props5.blockMargin,
          fontSize = _this$props5.fontSize;
      var theme = this.getTheme();
      var textHeight = Math.round(fontSize * LINE_HEIGHT);
      return blocks.map(function (week) {
        return week.map(function (day, y) {
          return React__default.createElement("rect", {
            x: "0",
            y: textHeight + (blockSize + blockMargin) * y,
            width: blockSize,
            height: blockSize,
            fill: theme["grade".concat(day.info ? day.info.intensity : 0)],
            "data-tip": day.info && day.info.count ? _this4.getTooltipMessage(day) : null,
            key: day.date
          });
        });
      }).map(function (week, x) {
        return React__default.createElement("g", {
          key: x,
          transform: "translate(".concat((blockSize + blockMargin) * x, ", 0)")
        }, week);
      });
    }
  }, {
    key: "renderMeta",
    value: function renderMeta(year, totalCount) {
      var fullYear = this.props.fullYear;
      var isCurrentYear = getYear(new Date()) === year;
      return React__default.createElement("div", {
        className: this.getClassNameFor('meta'),
        style: this.getStyles().meta
      }, isCurrentYear && fullYear ? 'Last year' : year, ' – ', isCurrentYear && !fullYear ? 'So far ' : null, totalCount, " contributions");
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var _this$props6 = this.props,
          children = _this$props6.children,
          style = _this$props6.style;
      var _this$state = this.state,
          error = _this$state.error,
          graphs = _this$state.graphs;
      var styles = this.getStyles();

      var _this$getDimensions = this.getDimensions(),
          width = _this$getDimensions.width,
          height = _this$getDimensions.height;

      if (error) {
        return React__default.createElement("p", null, "Error :(");
      }

      if (!graphs) {
        return React__default.createElement("div", {
          className: this.getClassNameFor('loading'),
          style: this.getStyles().loading
        }, "Loading \u2026");
      }

      return React__default.createElement("article", {
        className: NAMESPACE,
        style: style
      }, this.renderTitle(), graphs.map(function (graph, i) {
        var year = graph.year,
            blocks = graph.blocks,
            monthLabels = graph.monthLabels,
            totalCount = graph.totalCount;
        return React__default.createElement("div", {
          key: year,
          className: _this5.getClassNameFor('chart'),
          style: i < graphs.length - 1 ? styles.chart : null
        }, React__default.createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          width: width,
          height: height,
          viewBox: "0 0 ".concat(width, " ").concat(height),
          textRendering: "optimizeLegibility",
          className: _this5.getClassNameFor('calendar'),
          style: styles.calendar
        }, _this5.renderMonthLabels(monthLabels), _this5.renderBlocks(blocks)), _this5.renderMeta(year, totalCount), children);
      }));
    }
  }]);

  return GitHubCalendar;
}(React.Component);

GitHubCalendar.propTypes = {
  blockSize: PropTypes.number,
  blockMargin: PropTypes.number,
  children: PropTypes.node,
  color: PropTypes.string,
  dateFormat: PropTypes.string,
  fontSize: PropTypes.number,
  fullYear: PropTypes.bool,
  theme: PropTypes.objectOf(PropTypes.string),
  username: PropTypes.string.isRequired,
  years: PropTypes.arrayOf(PropTypes.number)
};
GitHubCalendar.defaultProps = {
  blockSize: 12,
  blockMargin: 2,
  color: null,
  dateFormat: 'MMM D, YYYY',
  fontSize: 14,
  fullYear: true,
  theme: DEFAULT_THEME,
  years: [Number(format(new Date(), 'YYYY'))]
};

module.exports = GitHubCalendar;
//# sourceMappingURL=index.js.map
